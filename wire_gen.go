// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/gin-gonic/gin"
	"github.com/lk153/go-template-gen/internal/env"
	"github.com/lk153/go-template-gen/internal/users"
	"github.com/lk153/go-template-gen/internal/yaml"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
)

// Injectors from wire.go:

func InitializeRouter(r *gin.Engine) users.Controller {
	model := users.InitModel()
	repo := users.InitRepo(model)
	service := users.InitService(repo)
	controller := users.InitController(r, service)
	return controller
}

func InitEnv() (yaml.YamlProcessor, error) {
	envVars := env.InitEnvVars()
	yamlProcessor := yaml.InitYamlProcessor(envVars)
	return yamlProcessor, nil
}

// wire.go:

func Startup() {
	r := gin.Default()
	InitEnv()
	InitializeRouter(r)
	srv := &http.Server{
		Addr:    ":8888",
		Handler: r.Handler(),
	}

	go func() {
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Listen on: %s\n", err)
		}
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("Shutting down server ...")

	ctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)
	defer cancel()
	if err := srv.Shutdown(ctx); err != nil {
		log.Fatal("Server shutdown with error:", err)
	}

	select {
	case <-ctx.Done():
		log.Println("Timeout!!!")
	}
	log.Println("Server exiting")
}
